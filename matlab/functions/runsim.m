function [simdata,spec,parms] = runsim(varargin)
% Usage:
% biosim(spec)
% biosim(spec,'key',value,...)
% Examples:
% biosim(spec,'timelimits',[0 100],'dt',.01,'verbose',1);

% ----------------------------------------------------------
% get specification
if nargin>0 && isstruct(varargin{1}) % biosim(spec,...)
  spec = varargin{1};
  if nargin>1, varargin = varargin(2:end); end
elseif nargin>0
  if ischar(varargin{1}) && exist(varargin{1},'file')
    spec = loadspec(varargin{1});
    if nargin>1, varargin = varargin(2:end); end
  elseif ischar(varargin{1}) && exist(varargin{1},'dir')
    if nargin>1 && ischar(varargin{2}) % biosim(fpath,prefix,...)
      spec = loadspec(varargin{1},varargin{2});
      if nargin>2, varargin = varargin(3:end); end
    else
      spec = loadspec(varargin{1});
      if nargin>1, varargin = varargin(2:end); end
    end
  else
    spec = loadspec(varargin{:});
  end
else
  error('You must supply at least one input.');
end
nodefield='entities';
if isfield(spec,'cells') && ~isfield(spec,'entities')
  spec.entities = spec.cells;
  spec = rmfield(spec,'cells');
  nodefield='cells';
elseif isfield(spec,'nodes') && ~isfield(spec,'entities')
  spec.entities = spec.nodes;
  spec = rmfield(spec,'nodes');
  nodefield='nodes';
end
if ~isfield(spec,'files') || isempty(spec.files)
  DBPATH = '/space/mdeh3/9/halgdev/projects/jsherfey/code/modeler/database';
  d=dir(DBPATH);
  spec.files = {d(cellfun(@(x)any(regexp(x,'.txt$')),{d.name})).name};
  spec.files = cellfun(@(x)fullfile(DBPATH,x),spec.files,'unif',0);
end

% ----------------------------------------------------------
% prepare parameters
if nargin <= 1, varargin = {}; end
parms = mmil_args2parms( varargin, ...
                           {  'timelimits',[0 40],[],...
                              'dsfact',1,[],...
                              'logfid',1,[],...
                              'SOLVER','euler',[],...
                              'dt',.01,[],...
                              'output_list',[],[],...
                              'override',[],[],...
                              'IC',[],[],...
                              'verbose',1,[],...
                              'couple_flag',0,[],...
                              'nofunctions',1,[],...
                              'cluster_flag',0,[],...
                              'coder',0,[],...
                              'debug',0,[],...
                              'timesurfer_flag',1,[],...
                              'identifier','default',[],...
                           }, false);
% ----------------------------------------------------------
% get model
if ~isfield(spec,'model') || ... % specification has not been processed by buildmodel()
    ~isempty(parms.output_list) || ... % outputs requested
    parms.coder==1 || ... % using codegen
    isfield(spec,'simulation') || ... % batch job generated by simstudy()
    (isfield(spec,'connections') && any( ~cellfun(@isempty,{spec.connections.label}) & (cellfun(@(x)isfield(x,'mechs'),{spec.connections}) & cellfun(@isempty,{spec.connections.mechs})) )) || ... % connection with undefined mechs
    any( ~cellfun(@isempty,{spec.(nodefield).label}) & (cellfun(@(x)isfield(x,'mechs'),{spec.(nodefield)}) & cellfun(@isempty,{spec.(nodefield).mechs})) ) % node with undefined mechs
  args = mmil_parms2args(parms);
  [model,ic,functions,auxvars,spec,readable,StateIndex] = buildmodel(spec,args{:});
else
  model=spec.model.ode;
  ic=spec.model.IC;
  functions=spec.model.functions;
  auxvars=spec.model.auxvars;
end
if ~isempty(parms.IC) && numel(parms.IC)==numel(ic)
  ic = parms.IC;
end
% get nofunctions from spec in case processed spec was provided
if issubfield(spec,'model.parms')
  parms.nofunctions = spec.model.parms.nofunctions;
end
% ----------------------------------------------------------
% run simulation
try args = mmil_parms2args(parms); catch args = {}; end
switch parms.SOLVER
  case {'euler','rk2','modifiedeuler','rk4'}
    odefun_filepath = dnsimulator(spec,args{:});
    tmp_str = strread(odefun_filepath,'%s','delimiter','/');
    odefun_filename = tmp_str{end};
    cwd=pwd;
    odefun_subdir = fullfile('/',tmp_str{1:end-1});
    cd(odefun_subdir);
    try
      if  ~exist('codegen') || parms.coder == 0 % if matlab coder is not available or you don't want to use it because it does not support your code
        [data,t] = feval(odefun_filename);
      else
        odefun_dir = fullfile('/',tmp_str{1:end-2});
        copyfile([odefun_filepath,'.m'],[odefun_dir,'/'])
        cd(odefun_dir);
        odefun_mfiles = {};
        dirinfo = dir('.');
        res_diff = 'not empty';
        j = 1;
        while ~isempty(res_diff) && j <= length(dirinfo)
          if ~dirinfo(j).isdir && ~strcmp(dirinfo(j).name(1:end-2),odefun_filename) && strncmp(dirinfo(j).name,odefun_filename,6) &&  strncmp(dirinfo(j).name(end-1:end),'.m',2)
            [~,res_diff] = system(['diff ',odefun_filename,'.m ',dirinfo(j).name]);
            if isempty(res_diff) && exist([dirinfo(j).name(1:end-2),'_mex.mexa64'],'file')
              delete([odefun_filename,'.m']);
              odefun_filename = dirinfo(j).name(1:end-2);
              filemex = [odefun_filename,'_mex'];
              fprintf('\n\nUsing previous mex file: %s\n\n',filemex);
              copyfile([filemex,'.mexa64'],[odefun_subdir,'/']);
              cd(odefun_subdir);
            elseif isempty(res_diff)
              delete([dirinfo(j).name(1:end-2),'.m']);
            end
          end
          j = j+1;
        end
        if ~exist('filemex')
          fprintf('\nNew model detected: generating the mex file...\n');
          cd(odefun_subdir);
          tic
          codegen_odefun(odefun_filename);
          toc
          filemex = [odefun_filename,'_mex'];
          copyfile([filemex,'.mexa64'],[odefun_dir,'/']);
        end
        tic
        [data,t] = feval(filemex);
        toc
      end
      if parms.debug==0 && parms.cluster_flag == 0
        rmdir(odefun_subdir,'s');
      end
      cd(cwd);
    catch err
      fprintf('\n\n%s\n\n',err.message);
      for i=1:length(err.stack)
        fprintf('\t in %s (line %g)\n',err.stack(i).name,err.stack(i).line);
      end
      simdata=[];
      if parms.debug==0 && parms.cluster_flag == 0
        rmdir(odefun_subdir,'s');
      end
      cd(cwd);
      rethrow(err);
    end
  otherwise
    [data,t] = biosimulator(model,ic,functions,auxvars,args{:});
end
% ----------------------------------------------------------
% prepare results (downsample/postprocess data, organize data structure):
if parms.dsfact > 1
  parms.dsfact = round(parms.dsfact);
  t = t(1:parms.dsfact:end);
  data = data(1:parms.dsfact:end,:);
end

[ntime,nvar] = size(data);
Elabels = {spec.entities.label}; % Entity labels
Esizes = [spec.entities.multiplicity]; % Entity population sizes (multiplicities)

% evaluate auxiliary variables to get adjacency matrices
if issubfield(spec,'connections.auxvars')
  for i = 1:length(spec.entities)
    for j = 1:length(spec.entities)
      aux = spec.connections(i,j).auxvars;
      for k = 1:size(aux,1)
        try % TEMPORARY TRY STATEMENT
            % added to catch mask=mask-diag(diag(mask)) when mask is not square
            % WARNING: this is a dangerous TRY statement that should be removed!
            % also in biosimulator() at line 20
          eval( sprintf('%s = %s;',aux{k,1},aux{k,2}) );
        end
      end
      if ~isempty(aux)
        try spec.connections(i,j).matrix = eval(aux{k,1}); end
      end
    end
  end
end

% store result in timesurfer format
clear simdata
if isfield(spec,'entities')
  simfield='entities';
elseif isfield(spec,'cells')
  simfield='cells';
elseif isfield(spec,'nodes')
  simfield='nodes';
end

if parms.timesurfer_flag
  datafield = 'epochs';% 'studies';
  maxN = max(Esizes);
  try
    for i = 1:length(spec.(simfield))
      EN = Esizes(i);
      varlist = unique(spec.(simfield)(i).var_list);
      VN = length(varlist);
      dat = zeros(VN,ntime,maxN);%EN); % vars x time x cells
      for v = 1:length(varlist)
        index = spec.(simfield)(i).var_index(strmatch(varlist{v},spec.(simfield)(i).var_list,'exact'));
        dat(v,:,1:length(index)) = data(:,index);
      end
      if ndims(dat)==2
        tmpdata = ts_matrix2data(single(dat),'time',t/1000,'datafield',datafield,'continuous',1);
      elseif ndims(dat)==3
        tmpdata = ts_matrix2data(single(dat),'time',t/1000,'datafield',datafield);
      end
      [tmpdata.sensor_info.label] = deal(varlist{:});
      [tmpdata.sensor_info.kind] = deal(i);
      if issubfield(spec,'simulation.scope');
        tmpdata.(datafield).cond_label = sprintf('%s.%s=%s',spec.simulation.scope,spec.simulation.variable,spec.simulation.values);
      else
        tmpdata.(datafield).cond_label = 'simulation';
      end
      simdata(i) = tmpdata;
      clear tmpdata dat
    end
  catch
    simdata = single(data);
  end
else
  %{
  sim_data.labels = {'TC_iNa_m', ...}
  sim_data.TC_iNa_m.raw [time x cells]
  sim_data.params (dt, tstart, tstop, solver)
  sim_data.git_hash
  %}
  allvarlist={};
  for i = 1:length(spec.(simfield))
    EN = Esizes(i);
    varlist = unique(spec.(simfield)(i).var_list,'stable');
    VN = length(varlist);
    for v = 1:length(varlist)
      index = spec.(simfield)(i).var_index(strmatch(varlist{v},spec.(simfield)(i).var_list,'exact'));
      simdata.(varlist{v}) = data(:,index);
    end
    allvarlist=cat(2,allvarlist,varlist);
  end
  simdata.labels=allvarlist;
  simdata.params=parms;
  simdata.time=t;
end
clear data

parms.IC = ic;

%% NOTES:
% entities => separate structures w/ sensor_info.kind = entity ID
  % state vars => "sensors" with sensor_info.label = varlabel or interface function label (=LHS)
  % entity instances => "trials"
  % elements of a simulation study => "conditions"
  % therefore:
    % data(entity).sensor_info(:).kind = entityID
    % data(entity).sensor_info(var).label = varlabel/mech_interface
    % data(entity).epochs(sim).cond_label = (scope,variable,value)
    % data(entity).epochs(sim).num_trials = Npop
    % [data(entity).epochs(sim).data] = vars x time x cells
  % example usage:
  % ts_ezplot(data(1),'chanlabels',varlist,'events',simarray)
  %   => compare population averages b/w study simulations
  % ts_ezplot(data(1),'chanlabels',varlist,'trials_flag',1)
  %   => overlay waveforms from all cells of an entity for a given var
